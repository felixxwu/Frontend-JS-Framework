{"version":3,"sources":["Framework.js","components/Button.js","components/Counter.js","components/ExitButton.js","components/Box.js","components/App.js","StateConfig.js","index.js"],"names":["Framework","init","root","id","stateConfig","postRenderJobs","styleMemory","actions","Object","keys","state","forEach","variable","render","Proxy","set","target","key","value","console","log","updateSubscribers","dispatch","action","arg","subscribe","name","subscriptions","includes","push","component","t0","performance","now","validateComponent","renderElement","el","document","getElementById","parentNode","replaceChild","postRender","Math","round","setTimeout","length","pop","renderByName","renderComponentByName","child","bind","children","undefined","text","createTextNode","createElement","tag","setAttribute","attrs","attrName","attrValue","events","event","handler","addEventListener","e","flags","NO_SELF_RENDER","stopPropagation","appendChild","index","style","newStyle","subscribeTo","acceptedFields","JSON","stringify","freeze","subscribed","number","className","class","data","myCount","click","count","states","START","EXPANDING","EXPANDED","dimensions","animationTime","buttons","Counter","exit","Box","boxExpanding","incrementCount","amount","resetCount","setBoxExpanding","bool","App","StateConfig"],"mappings":"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","file":"framework.c6fb36de.js","sourceRoot":"..","sourcesContent":["const Framework = {\r\n    init(root, id, stateConfig) {\r\n        this.root = root\r\n        this.id = id\r\n        this.postRenderJobs = []\r\n        this.styleMemory = {}\r\n        this.actions = stateConfig.actions\r\n        Object.keys(stateConfig.state).forEach(variable => {\r\n            this.state[variable] = stateConfig.state[variable]\r\n        })\r\n        this.render(this.root, this.id)\r\n    },\r\n\r\n    // STATE #######################################################################\r\n\r\n    state: new Proxy({}, {\r\n        set: (target, key, value) => {\r\n            target[key] = value;\r\n            console.log('STATE', key, '=', value)\r\n            updateSubscribers(key)\r\n            return true;\r\n        }\r\n    }),\r\n\r\n    dispatch(action, arg) {\r\n        this.actions(this.state)[action](arg)\r\n    },\r\n\r\n    subscribe(name, variable) {\r\n        if (!this.subscriptions[variable]) this.subscriptions[variable] = []\r\n        if (this.subscriptions[variable].includes(name)) return\r\n        this.subscriptions[variable].push(name)\r\n    },\r\n\r\n    subscriptions: {},\r\n\r\n    // RENDERING #####################################################################\r\n\r\n    // renders html element nodes using \"component\" into the DOM at id=\"id\"\r\n    render(component, id) {\r\n        const t0 = performance.now()\r\n        \r\n        if (!id) id = component.id\r\n        this.validateComponent(component)\r\n\r\n        const render = this.renderElement(component, id)\r\n        const el = document.getElementById(id)\r\n        el && el.parentNode.replaceChild(render, el)\r\n\r\n        this.postRender()\r\n\r\n        console.log('Render took', Math.round(performance.now() - t0), 'ms id:', id)\r\n    },\r\n\r\n    // execture post-render jobs\r\n    postRender() {\r\n        setTimeout(() => {\r\n            while (this.postRenderJobs.length !== 0) this.postRenderJobs.pop()()\r\n        }, 0);\r\n    },\r\n\r\n    // re-renders all components with that name\r\n    renderByName(name) {\r\n        this.renderComponentByName(this.root, name)\r\n    },\r\n\r\n    // re-renders all components with that name starting at this component\r\n    renderComponentByName(component, name) {\r\n        if (component.name === name) {\r\n            this.render(component)\r\n            return\r\n        }\r\n        if (component.child) {\r\n            this.renderComponentByName(component.child.bind(component)(), name)\r\n        }\r\n        if (component.children) {\r\n            component.children.bind(component)().forEach(child => {\r\n                this.renderComponentByName(child, name)\r\n            })\r\n        }\r\n    },\r\n\r\n    // returns an element node from a json component\r\n    renderElement(component, id) {\r\n        if (id) {\r\n            component.id = id\r\n        }\r\n\r\n        // simple text component\r\n        if (component.text !== undefined) return document.createTextNode(component.text)\r\n\r\n        // other types\r\n        const el = document.createElement(component.tag)\r\n        el.setAttribute('id', component.id)\r\n        \r\n        // add all the attrs using element.setAttribute()\r\n        if (component.attrs !== undefined) {\r\n            Object.keys(component.attrs).forEach(attrName => {\r\n                const attrValue = component.attrs[attrName]\r\n                el.setAttribute(attrName, attrValue)\r\n            })\r\n        }\r\n        \r\n        // add all the event listeners using element.addEventListener()\r\n        if (component.events !== undefined) {\r\n            Object.keys(component.events).forEach(event => {\r\n                const handler = component.events[event]\r\n                el.addEventListener(event, (e) => {\r\n                    const flag = handler.bind(component)(e)\r\n                    if (flag !== this.flags.NO_SELF_RENDER) {\r\n                        this.render(component)\r\n                    }\r\n                    e.stopPropagation()\r\n                })\r\n            })\r\n        }\r\n        \r\n        // add a single child component\r\n        if (component.child !== undefined) {\r\n            el.appendChild(this.renderElement(component.child.bind(component)(), `${id}-0`))\r\n        }\r\n        \r\n        // add an array of children components\r\n        if (component.children !== undefined) {\r\n            component.children.bind(component)().forEach((child, index) => {\r\n                el.appendChild(this.renderElement(child, `${id}-${index}`))\r\n            })\r\n        }\r\n\r\n        // only set this.styles don't actually set the attribute, since it needs to be set after render for transitions to work\r\n        if (component.style !== undefined) {\r\n            el.setAttribute('style', this.styleMemory[component.id])\r\n            this.postRenderJobs.push(() => {\r\n                const newStyle = component.style.bind(component)()\r\n                const el = document.getElementById(component.id)\r\n                if (el) el.style = newStyle\r\n                this.styleMemory[component.id] = newStyle\r\n            })\r\n        }\r\n\r\n        if (component.subscribeTo !== undefined) {\r\n            component.subscribeTo.forEach(variable => {\r\n                this.subscribe(component.name, variable)\r\n            })\r\n        }\r\n        \r\n        return el\r\n    },\r\n\r\n    // VALIDATION ##############################################################\r\n\r\n    validateComponent(component) {\r\n        const acceptedFields = ['text', 'name', 'tag', 'data', 'attrs', 'events', 'child', 'children', 'style', 'id', 'subscribeTo']\r\n        Object.keys(component).forEach(key => {\r\n            if (!acceptedFields.includes(key)) {\r\n                throw `Field \"${key}\" is not an accepted component field, use one of ${JSON.stringify(acceptedFields)}`\r\n            }\r\n        })\r\n\r\n        if (component.text !== undefined && Object.keys(component).length !== 1) {\r\n            throw 'Simple text components must only contain a \"text\" field ' + JSON.stringify(component) \r\n        }\r\n        if (component.text === undefined) {\r\n            if (!component.tag) throw 'Component must have a \"tag\" ' + JSON.stringify(component) \r\n            if (!component.name) throw 'Component must have a \"name\" ' + JSON.stringify(component)\r\n        }\r\n\r\n        // type checking\r\n        if (component.text !== undefined && typeof(component.text) !== 'string') {\r\n            throw 'Field \"text\" must be of type string ' + JSON.stringify(component)\r\n        }\r\n        if (component.name !== undefined && typeof(component.name) !== 'string') {\r\n            throw 'Field \"name\" must be of type string ' + JSON.stringify(component)\r\n        }\r\n        if (component.tag !== undefined && typeof(component.tag) !== 'string') {\r\n            throw 'Field \"tag\" must be of type string ' + JSON.stringify(component)\r\n        }\r\n        if (component.style !== undefined && typeof(component.style) !== 'function') {\r\n            throw 'Field \"style\" must be of type function ' + JSON.stringify(component)\r\n        }\r\n\r\n        if (component.attrs !== undefined && typeof(component.attrs) !== 'object') {\r\n            throw 'Field \"attrs\" must be of type object ' + JSON.stringify(component)\r\n        }\r\n        if (component.attrs !== undefined) {\r\n            Object.keys(component.attrs).forEach(key => {\r\n                if (typeof(component.attrs[key]) !== 'string') {\r\n                    throw 'All \"attrs\" must be of type string ' + JSON.stringify(component)\r\n                }\r\n            })\r\n        }\r\n\r\n        if (component.events !== undefined && typeof(component.events) !== 'object') {\r\n            throw 'Field \"events\" must be of type object ' + JSON.stringify(component)\r\n        }\r\n        if (component.events !== undefined) {\r\n            Object.keys(component.events).forEach(key => {\r\n                if (typeof(component.events[key]) !== 'function') {\r\n                    throw 'All \"events\" must be of type function ' + JSON.stringify(component)\r\n                }\r\n            })\r\n        }\r\n\r\n        // if (component.child !== undefined && typeof(component.child) !== 'object') {\r\n        //     throw 'Field \"child\" must be of type object ' + JSON.stringify(component)\r\n        // }\r\n        // if (component.children !== undefined && !Array.isArray(component.children)) {\r\n        //     throw 'Field \"children\" must be an array ' + JSON.stringify(component)\r\n        // }\r\n    },\r\n\r\n    flags: Object.freeze({\r\n        NO_SELF_RENDER: 1\r\n    }),\r\n}\r\n\r\nconst updateSubscribers = (variable) => {\r\n    const subscribed = Framework.subscriptions[variable]\r\n    subscribed && subscribed.forEach(name => {\r\n        Framework.renderByName(name)\r\n    })\r\n}\r\n\r\nexport default Framework\r\n","import Framework from '../Framework'\r\n\r\nexport default number => {\r\n    let className = ''\r\n    if (number === 1) className = 'a4'\r\n    if (number === 2) className = 'a5'\r\n    if (number === 3) className = 'a6'\r\n    \r\n    return {\r\n        name: 'button',\r\n        tag: 'div',\r\n        attrs: { class: `${className} grid3x3` },\r\n        data: {\r\n            myCount: 0\r\n        },\r\n        style() {\r\n            return `\r\n                width: 70px;\r\n                height: 70px;\r\n                border: solid 1px grey;\r\n                cursor: pointer;\r\n            `\r\n        },\r\n        events: {\r\n            click() {\r\n                this.data.myCount += 1\r\n                Framework.dispatch('incrementCount', number)\r\n            }\r\n        },\r\n        child() {\r\n            return {\r\n                tag: 'div',\r\n                child: () => ({text: `+${number} (${this.data.myCount})`})\r\n            }\r\n        }\r\n    }\r\n}","import Framework from '../Framework'\r\n\r\nexport default {\r\n    name: 'counter',\r\n    tag: 'div',\r\n    attrs: {\r\n        class: 'a2'\r\n    },\r\n    subscribeTo: ['count'],\r\n    child: () => ({text: `Count: ${Framework.state.count}`})\r\n}\r\n","export default handler => ({\r\n    name: 'exit',\r\n    tag: 'div',\r\n    attrs: { class: 'a8 grid3x3' },\r\n    style() {\r\n        return `\r\n            width: 100px;\r\n            height: 50px;\r\n            border: 1px solid grey;\r\n            cursor: pointer;\r\n        `\r\n    },\r\n    events: { click: handler },\r\n    child: () => ({\r\n        name: '',\r\n        tag: 'div',\r\n        child: () => ({text: 'exit'})\r\n    })\r\n})\r\n","import Button from './Button'\r\nimport Counter from './Counter'\r\nimport Framework from '../Framework'\r\nimport ExitButton from './ExitButton'\r\n\r\nconst states = Object.freeze({START: 1, EXPANDING: 2, EXPANDED: 3})\r\nconst dimensions = {START: [100, 50], EXPANDED: [500, 300]}\r\nconst animationTime = 0.5\r\n\r\nexport default {\r\n    name: 'box',\r\n    tag: 'div',\r\n    attrs: { class: 'grid3x3' },\r\n    data: {\r\n        dimensions: dimensions.START,\r\n        state: states.START,\r\n    },\r\n    events: {\r\n        click() { \r\n            if (this.data.state === states.EXPANDED) return Framework.flags.NO_SELF_RENDER\r\n\r\n            this.data.dimensions = dimensions.EXPANDED\r\n            this.data.state = states.EXPANDING\r\n            \r\n            Framework.dispatch('setBoxExpanding', true)\r\n            setTimeout(() => {\r\n                this.data.state = states.EXPANDED\r\n                Framework.dispatch('setBoxExpanding', false)\r\n            }, animationTime * 1000);\r\n        }\r\n    },\r\n    subscribeTo: ['boxExpanding'],\r\n    style() { \r\n        return `\r\n            width: ${this.data.dimensions[0]}px;\r\n            height: ${this.data.dimensions[1]}px;\r\n            max-width: 100vw;\r\n            border: 1px solid grey;\r\n            transition: ${animationTime}s;\r\n            cursor: ${this.data.state === states.START ? 'pointer' : 'initial'};\r\n        `\r\n    },\r\n    children() {\r\n        const start = [{\r\n            tag: 'div',\r\n            child: () => ({ text: 'start' })\r\n        }]\r\n        const exit = () => {\r\n            this.data.dimensions = dimensions.START\r\n            this.data.state = states.EXPANDING\r\n            \r\n            Framework.dispatch('resetCount')\r\n            Framework.dispatch('setBoxExpanding', true)\r\n            setTimeout(() => {\r\n                this.data.state = states.START\r\n                Framework.dispatch('setBoxExpanding', false)\r\n            }, animationTime * 1000);\r\n        }\r\n        const buttons = [Counter, Button(1), Button(2), Button(3), ExitButton(exit)]\r\n        \r\n        if (this.data.state === states.START) return start\r\n        if (this.data.state === states.EXPANDING) return []\r\n        if (this.data.state === states.EXPANDED) return buttons\r\n    }\r\n}\r\n","import Box from './Box'\r\n\r\nexport default {\r\n    name: 'app',\r\n    tag: 'div',\r\n    attrs: { class: 'grid3x3' },\r\n    style: () => `\r\n        width: 100vw;\r\n        height: 100vh;\r\n        overflow: hidden;\r\n        font-family: 'Lexend Deca', sans-serif;\r\n    `,\r\n    children() {\r\n        return [Box]\r\n    }\r\n}\r\n","export default {\r\n    state: {\r\n        count: 0,\r\n        boxExpanding: false\r\n    },\r\n    actions(state) {\r\n        return {\r\n            incrementCount: amount => state.count += amount,\r\n            resetCount: () => state.count = 0,\r\n            setBoxExpanding: bool => state.boxExpanding = bool\r\n        }\r\n    }\r\n}","import Framework from './Framework'\r\nimport App from './components/App'\r\nimport StateConfig from './StateConfig'\r\n\r\n// render into the div with id='app'\r\nFramework.init(App, 'app', StateConfig)\r\n"]}